// 滑动窗口解法O(n)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<char> v;
        vector<char>::iterator start;
        int ret_max = 0;
        for(int i = 0; i < s.size(); i++){
            while(is_same(v, s[i])){
                start = v.begin();
                v.erase(start);
            }
            v.push_back(s[i]);
            ret_max = ret_max > v.size() ? ret_max : v.size();
        }
        return ret_max;
    }

    bool is_same(vector<char>& v, char c){
        for(int i = 0; i < v.size(); i++){
            if(v[i] == c)
                return true;
        }
        return false;
    }
};


// 动态规划解法O(n^2)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size() == 0) return 0;
        vector<int> v;
        int max_dp = 1;
        v.push_back(1);
        for(int i = 1; i < s.size(); i++){
            int cnt = 1;
            for(int j = 0; j < i; j++){
                if(s[i] == s[j])
                    cnt = 1;
                else
                    cnt++;
            }
            int min_dp = min(cnt, v[i-1]+1);
            v.push_back(min_dp);
            max_dp = max_dp > min_dp ? max_dp : min_dp;
        }
        return max_dp;
    }
};
