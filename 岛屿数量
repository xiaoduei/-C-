#include <iostream>
#include <queue>
#include <vector>

using namespace std;

// 增量数组
int _x[] = { 1, -1, 0, 0 };
int _y[] = { 0, 0, 1, -1 };

// dfs实现
void dfs(vector<vector<char>>& grid, vector<vector<int>>& mark,
	int m, int n)
{
	mark[m][n] = 1;
	for (int i = 0; i < 4; i++) {
		int newx = m + _x[i];
		int newy = n + _y[i];
		if (newx < 0 || newx >= grid.size() || newy < 0 || newy >= grid[0].size())
			continue;
		if (grid[newx][newy] == '1' && mark[newx][newy] == 0)
			dfs(grid, mark, newx, newy);
	}	
}

// bfs实现
void bfs(vector<vector<char>>& grid, vector<vector<int>>& mark, 
        int m, int n)
    {
        queue<Node> Q;
        Node node(m , n);
        Q.push(node);
        mark[m][n] = 1;
        while(!Q.empty()){
            Node cur = Q.front();
            Q.pop();
            for(int i = 0; i < 4; i++){
                int newx = cur.x + _x[i];
                int newy = cur.y + _y[i];
                Node tmp(newx, newy);
                // 越界
                if(newx < 0 || newx >= grid.size() 
                || newy < 0 || newy >= grid[0].size()){
                    continue;
                }
                //没有访问且为岛屿
                if(grid[newx][newy] == '1' && mark[newx][newy] == 0){
                    Q.push(tmp);
                    mark[newx][newy] = 1;
                }
            }
        }        
    }

int numIslands(vector<vector<char>>& grid) {
	vector<vector<int>> mark(grid.size(), vector<int>(grid[0].size()));
	cout << grid[0].size();
	int ans = 0;
	for (int i = 0; i < grid.size(); i++) {
		for (int j = 0; j < grid[0].size(); j++) {
			mark[i][j] = 0;
		}
	}
	for (int i = 0; i < grid.size(); i++) {
		for (int j = 0; j < grid[0].size(); j++) {
			if (grid[i][j] == '1' && mark[i][j] == 0) {
				dfs(grid, mark, i, j);
				ans++;
			}
		}
	}
	return ans;
}

int main()
{
	/*
		11110
		11010
		11000
		00000
	*/

	vector< vector<char> > grid(4, vector<char>(5));
	for(int i = 0; i < grid.size(); i++) {
		for(int j = 0; j < grid[0].size(); j++){
			cin >> grid[i][j];
		}
	}

	for (int i = 0; i < grid.size(); i++) {
		for (int j = 0; j < grid[0].size(); j++) {
			cout << grid[i][j] << ' ';
		}
		cout << endl;
	}
	cout << numIslands(grid) << endl;
	system("pause");
	return 0;
}
